const API_URL = 'https://appybackend-production.up.railway.app/chat';
const CONTACT_URL = 'https://appybackend-production.up.railway.app/contact';
const toggle = document.getElementById('chat-toggle');
const windowEl = document.getElementById('chat-window');
const closeBtn = document.getElementById('chat-close');
const bodyEl = document.getElementById('chat-body');
const inputEl = document.getElementById('user-input');
const sendBtn = document.getElementById('send-btn');

let hasWelcomed = false;
let askedForConsent = false;
let inNeedsFlow = false;
let currentQuestion = 0;

// BehovsflÃ¶de med frÃ¥gor
const questions = [
  'Vad vill ni ha hjÃ¤lp med? (hemsida, app, foto, AI-bot eller virtuell assistentâ€¦)',
  'BerÃ¤tta gÃ¤rna lite mer ingÃ¥ende om ert projekt!',
  'Vad Ã¤r det primÃ¤ra syftet med detta, vad vill ni Ã¥stadkomma?',
  'Vad heter ert fÃ¶retag?',
  'Inom vilken bransch Ã¤r ni?',
  'Hur ser er tidplan ut? NÃ¤r vill ni ha det klart?',
  'Vart finns ni geografiskt?',
  'Slutligen, vad Ã¤r ditt namn?',
  'Vad har du fÃ¶r e-postadress?',
  'Vad har du fÃ¶r telefonnummer?',
];
const answers = [];

// Ã–ppna/stÃ¤ng chatten
toggle.addEventListener('click', () => {
  const isOpen = windowEl.classList.toggle('scale-y-100');
  windowEl.classList.toggle('scale-y-0', !isOpen);
  if (isOpen && !hasWelcomed) {
    appendMessage(
      'Tjena! Jag Ã¤r appyBot â€“ vad kan jag hjÃ¤lpa dig med idag?',
      true
    );
    hasWelcomed = true;
  }
});

// StÃ¤ng-knapp
closeBtn.addEventListener('click', () => {
  windowEl.classList.add('scale-y-0');
  windowEl.classList.remove('scale-y-100');
});

// Enter = skicka
inputEl.addEventListener('keydown', (e) => {
  if (e.key === 'Enter') {
    e.preventDefault();
    sendMessage();
  }
});
sendBtn.addEventListener('click', sendMessage);

// Visa meddelande i chatten
function appendMessage(text, isBot = false) {
  const msg = document.createElement('div');
  msg.textContent = text;
  msg.className = isBot
    ? 'italic text-gray-300 mb-2'
    : 'text-right text-gray-100 mb-2';
  bodyEl.appendChild(msg);
  bodyEl.scrollTop = bodyEl.scrollHeight;
}

// logik fÃ¶r varje anvÃ¤ndarmeddelande
async function sendMessage() {
  const text = inputEl.value.trim();
  if (!text) return;

  // â”€â”€ 0) Behovsanalys-trigger â”€â”€
  const needsRegex =
    /offert|behovsanalys|ny hemsida|skapa en hemsida|(?:behov av )?app(?:e?r)?|website|webbsida|fotografering|foto|photography|mjukvara|software|ai|bot|virtuell assistent|fixa hemsida|fixa hemsidor|behÃ¶ver en|ska ha|kan ni/i;
  if (!askedForConsent && !inNeedsFlow && needsRegex.test(text)) {
    appendMessage(text, false);

    // Anpassad intro beroende pÃ¥ kategori
    if (/ai|bot|virtuell assistent/i.test(text)) {
      appendMessage(
        'SpÃ¤nnande â€“ ni funderar pÃ¥ en AI-bot eller virtuell assistent!',
        true
      );
    } else if (/(?:behov av )?app(?:e?r)?|software/i.test(text)) {
      appendMessage(
        'Vad kul att ni Ã¤r intresserade av en app eller mjukvara!',
        true
      );
    } else if (/hemsida|website|webbsida/i.test(text)) {
      appendMessage(
        'Vad kul att ni vill ha hjÃ¤lp med en hemsida/webbsida!',
        true
      );
    } else if (/fotografering|foto|photography/i.test(text)) {
      appendMessage(
        'Fotografering lÃ¥ter toppen â€“ bra bilder lyfter ju varumÃ¤rket!',
        true
      );
    } else {
      appendMessage('LÃ¥ter som ett spÃ¤nnande projekt!', true);
    }

    // Okej medd samtycke?
    appendMessage(
      'Ã„r det okej att jag stÃ¤ller nÃ¥gra frÃ¥gor om detta? Jag skickar dina svar vidare till Andreas efterÃ¥t som fÃ¥r kolla nÃ¤rmare pÃ¥ det och Ã¥terkomma till dig. Okej? (Ja/Nej)',
      true
    );
    askedForConsent = true;
    inputEl.value = '';
    return;
  }

  // â”€â”€ 1) Hantera samtycke â”€â”€
  if (askedForConsent && !inNeedsFlow) {
    appendMessage(text, false);

    const yesRegex =
      /^(ja|japp|jajjemen|absolut|visst|sjÃ¤lvklart|okej|kÃ¶r pÃ¥|yes?)\b/i;
    const noRegex = /^(nej|nÃ¤|nej tack|nope|nÃ¤du|icke|absolut inte)\b/i;

    if (yesRegex.test(text)) {
      inNeedsFlow = true;
      appendMessage(questions[currentQuestion], true);
    } else if (noRegex.test(text)) {
      appendMessage(
        'Inga problem! Du kan alltid kontakta appyChap via kontaktformulÃ¤ret ğŸ˜‰',
        true
      );
      askedForConsent = false;
    } else {
      appendMessage(
        'Jag fÃ¶rstod inte ditt svar. SÃ¤g gÃ¤rna Ja eller Nej sÃ¥ vi kan gÃ¥ vidare! ğŸ˜Š',
        true
      );
    }

    inputEl.value = '';
    return;
  }

  // â”€â”€ 2) Stegvis behovsanalys â”€â”€
  if (inNeedsFlow) {
    appendMessage(text, false);
    answers.push({ question: questions[currentQuestion], answer: text });
    currentQuestion++;

    if (currentQuestion < questions.length) {
      appendMessage(questions[currentQuestion], true);
    } else {
      // Alla frÃ¥gor klara
      appendMessage('Tack! Jag skickar dina svar vidare!', true);

      // Bygg sammanfattning
      const summary = answers
        .map((a) => `â€¢ ${a.question}\nâ†’ ${a.answer}`)
        .join('\n\n');

      // HÃ¤mta de tre sista svaren fÃ¶r namn, mejl, telefon
      const name = answers[questions.length - 3].answer;
      const email = answers[questions.length - 2].answer;
      const phone = answers[questions.length - 1].answer;

      try {
        const res = await fetch(CONTACT_URL, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            name,
            email,
            phone,
            message: `Behovsanalys frÃ¥n appyBot:\n\n${summary}`,
          }),
        });
        if (!res.ok) throw new Error(`Status ${res.status}`);
        appendMessage(
          'FÃ¤rdigt â€“ Andreas Ã¥terkommer sÃ¥ snart han kan! ğŸ˜‰',
          true
        );
      } catch (err) {
        console.error('Kontakt-POST failed:', err);
        appendMessage(
          'Oj dÃ¥, kunde inte skicka din analys â€“ prova igen senare.',
          true
        );
      }

      // NollstÃ¤ll ï¬‚Ã¶det
      askedForConsent = false;
      inNeedsFlow = false;
      currentQuestion = 0;
      answers.length = 0;
    }

    inputEl.value = '';
    return;
  }

  // â”€â”€ 3) Vanligt "hÃ¶r av dig"-fall â”€â”€
  const contactRegex =
    /kontakta\s*oss|kontakt(ar jag)?|hur kan jag hÃ¶r av mig|hÃ¶r av dig/i;
  if (contactRegex.test(text)) {
    appendMessage(text, false);
    loadContent('contact.html');
    appendMessage('Jag har Ã¶ppnat kontaktformulÃ¤ret Ã¥t dig! ğŸ˜‰', true);
    inputEl.value = '';
    return;
  }

  // â”€â”€ 4) Vanligt AI-anrop â”€â”€
  appendMessage(text, false);
  inputEl.value = '';
  appendMessage('â€¦ skickarâ€¦', true);

  try {
    const res = await fetch(API_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ message: text }),
    });
    if (!res.ok) throw new Error(`Status ${res.status}`);
    const { reply } = await res.json();
    const lastMsg = bodyEl.lastChild;
    if (lastMsg && lastMsg.textContent === 'â€¦ skickarâ€¦') {
      bodyEl.removeChild(lastMsg);
    }
    appendMessage(reply, true);
  } catch (err) {
    const lastMsg = bodyEl.lastChild;
    if (lastMsg && lastMsg.textContent === 'â€¦ skickarâ€¦') {
      bodyEl.removeChild(lastMsg);
    }
    appendMessage('Oj dÃ¥, nÃ¥got blev fel ğŸ˜•', true);
    console.error('Chat-error:', err);
  }
}
