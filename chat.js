// api chat & kontaktformul√§r
const API_URL = 'https://appybackend-production.up.railway.app/chat';
const CONTACT_URL = 'https://appybackend-production.up.railway.app/contact';

// element f√∂r att hantera chatten
const toggle = document.getElementById('chat-toggle');
const windowEl = document.getElementById('chat-window');
// H√§r l√§gger vi till rundade h√∂rn och overflow hidden direkt efter vi h√§mtat elementet:
windowEl.classList.add('rounded-xl', 'overflow-hidden');

const closeBtn = document.getElementById('chat-close');
const bodyEl = document.getElementById('chat-body');
const inputEl = document.getElementById('user-input');
const sendBtn = document.getElementById('send-btn');

// Behovsanalys-fr√•gor
const questions = [
  'Vad beh√∂ver ni hj√§lp med? (t.ex hemsida, app, fotografering/fotoredigering, automatiserade processer, AI-bottar eller n√•got annat roligt)',
  'Ber√§tta g√§rna mer detaljerat om ert projekt. Mer information ger tr√§ffs√§krare uppskattning av tid och kostnad.',
  'Vad √§r det prim√§ra m√•let med projektet?',
  'Vad heter ert f√∂retag eller organisation?',
  'Vilken bransch verkar ni inom?',
  'N√§r √∂nskar ni att projektet ska vara klart?',
  'Var √§r ni baserade geografiskt?',
  'Ditt namn?',
  'Vilken e-postadress n√•s du p√•?',
  'Vilket telefonnummer n√•s du p√•?',
];

// h√•ller koll p√• svaren och status i chatten
let answers = [];
let hasWelcomed = false;
let askedForConsent = false;
let inNeedsFlow = false;
let currentQuestion = 0;

// sparar unik session
let sessionId = window.sessionStorage.getItem('appySessionId');
if (!sessionId) {
  sessionId = crypto.randomUUID();
  window.sessionStorage.setItem('appySessionId', sessionId);
}

// koppling knappar o input t funktioner
toggle.addEventListener('click', toggleChatWindow);
closeBtn.addEventListener('click', closeChatWindow);
inputEl.addEventListener('keydown', (e) => {
  if (e.key === 'Enter') {
    e.preventDefault();
    sendMessage();
  }
});
sendBtn.addEventListener('click', sendMessage);

// √∂ppna/st√§ng chat
function toggleChatWindow() {
  const isOpen = windowEl.classList.toggle('scale-y-100');
  windowEl.classList.toggle('scale-y-0', !isOpen);
  if (isOpen && !hasWelcomed) {
    appendMessage(
      'Tjena! Jag √§r appyBot! Vad kan jag hj√§lpa dig med idag?',
      true
    );
    hasWelcomed = true;
    inputEl.focus();
  }
}

// st√§ng chat p√• x
function closeChatWindow() {
  windowEl.classList.add('scale-y-0');
  windowEl.classList.remove('scale-y-100');

  // Nollst√§ll chatfl√∂det
  answers = [];
  hasWelcomed = false;
  askedForConsent = false;
  inNeedsFlow = false;
  currentQuestion = 0;

  // rensa chatthistorik fr√•n UI
  bodyEl.innerHTML = '';
}

// l√§gger till ett meddelande i chatten
function appendMessage(text, isBot = false) {
  const msg = document.createElement('div');
  msg.textContent = text;
  msg.className = isBot
    ? 'bot-message italic text-yellow-400 bg-yellow-900 rounded-tl-xl rounded-tr-xl rounded-br-xl p-1 max-w-4/5 mr-auto mb-2 text-left font-semibold'
    : 'user-message text-gray-100 bg-transparent rounded-tr-xl rounded-tl-xl rounded-bl-xl p-1 max-w-4/5 ml-auto mb-2 text-right font-medium';
  msg.style.lineHeight = '1,3';
  bodyEl.appendChild(msg);
  bodyEl.scrollTop = bodyEl.scrollHeight;
}

// funktion anv√§ndarens meddelande
async function sendMessage() {
  const text = inputEl.value.trim();
  if (!text) return;

  // kontroll texten triggning behovsanalys
  const needsRegex =
    /offert|behovsanalys|ny hemsida|skapa en hemsida|(?:behov av )?\bapp(?:e?r)?\b|website|webbsida|fotografering|foto|photography|mjukvara|software|ai|bot|virtuell assistent|fixa hemsida|fixa hemsidor|beh√∂ver en|ska ha|kan ni|problem|fel|bugg|strula|h√§nga sig|crash|strul|kass|kr√•nglar|funkar inte|√§r d√∂d/i;

  if (!askedForConsent && !inNeedsFlow && needsRegex.test(text)) {
    await handleNeedsTrigger(text);
    return;
  }

  // ok, ja eller nej att st√§lla fr√•gor som skickas vidare?
  if (askedForConsent && !inNeedsFlow) {
    await handleConsent(text);
    return;
  }

  // hantera fr√•gor o svar i behovsanalys-fl√∂det
  if (inNeedsFlow) {
    await handleNeedsFlow(text);
    return;
  }

  //om bes√∂kare vill kontakta direkt, √∂ppna kontaktformul√§ret
  const contactRegex =
    /kontakta\s*oss|kontakt(ar jag)?|hur kan jag h√∂r av mig|h√∂r av dig/i;
  if (contactRegex.test(text)) {
    appendMessage(text, false);
    loadContent('contact.html');
    appendMessage('Jag har √∂ppnat kontaktformul√§ret √•t dig! üòâ', true);
    inputEl.value = '';
    return;
  }

  // skicka texten till AI:n f√∂r svar
  await handleAIResponse(text);
}

// anv√§ndaren skriver in ett behov som ska trigga behovsanalysen
async function handleNeedsTrigger(text) {
  appendMessage(text, false);

  const problemRegex =
    /problem|fel|bugg|strula|h√§nga sig|crash|strul|kass|kr√•nglar|funkar inte|√§r d√∂d/i;
  if (problemRegex.test(text)) {
    appendMessage('Ajd√•, det l√•ter inte bra!', true);
    appendMessage(
      '√Ñr det okej att jag st√§ller n√•gra fr√•gor om detta? Jag skickar dina svar vidare till Andreas som f√•r kolla n√§rmare p√• det och √•terkomma till dig. Okej?',
      true
    );
    askedForConsent = true;
    inputEl.value = '';
    return;
  }

  // svar beroende p√• vad anv√§ndaren n√§mner
  if (/ai|bot|virtuell assistent/i.test(text)) {
    appendMessage(
      'Sp√§nnande ‚Äì ni funderar p√• en AI-bot eller virtuell assistent!',
      true
    );
  } else if (/(?:behov av )?app(?:e?r)?|software/i.test(text)) {
    appendMessage(
      'Vad kul att ni √§r intresserade av en app eller mjukvara!',
      true
    );
  } else if (/hemsida|website|webbsida/i.test(text)) {
    appendMessage(
      'Vad kul att ni vill ha hj√§lp med en hemsida/webbsida!',
      true
    );
  } else if (/fotografering|foto|photography/i.test(text)) {
    appendMessage(
      'Fotografering l√•ter toppen ‚Äì bra bilder lyfter ju varum√§rket!',
      true
    );
  } else {
    appendMessage('L√•ter som ett sp√§nnande projekt!', true);
  }

  // ok med fler fr√•gor?
  appendMessage(
    '√Ñr det okej att jag st√§ller n√•gra fr√•gor om detta? Jag skickar dina svar vidare till Andreas som f√•r kolla n√§rmare p√• det och √•terkomma till dig. Okej?',
    true
  );

  askedForConsent = true;
  inputEl.value = '';
}

// ja eller nej
async function handleConsent(text) {
  appendMessage(text, false);

  const yesRegex =
    /^(ja|japp|jajjemen|absolut|visst|sj√§lvklart|okej|k√∂r p√•|yes?)\b/i;
  const noRegex = /^(nej|n√§|nej tack|nope|n√§du|icke|absolut inte)\b/i;

  if (yesRegex.test(text)) {
    inNeedsFlow = true;
    appendMessage(questions[currentQuestion], true);
    inputEl.focus();
  } else if (noRegex.test(text)) {
    appendMessage(
      'Inga problem! Du kan alltid kontakta appyChap via kontaktformul√§ret üòâ',
      true
    );
    askedForConsent = false;
  } else {
    appendMessage(
      'Jag f√∂rstod inte ditt svar. S√§g g√§rna Ja eller Nej s√• vi kan g√• vidare!',
      true
    );
  }

  inputEl.value = '';
}

// behovsanalys-fl√∂det steg f√∂r steg
async function handleNeedsFlow(text) {
  // ok format p√• mejl och telefonnummer?
  if (currentQuestion === questions.length - 2 && !text.includes('@')) {
    appendMessage(
      'Ajd√•, det verkar inte vara en giltig e-postadress. F√∂rs√∂k igen:',
      true
    );
    inputEl.value = '';
    return;
  }
  if (currentQuestion === questions.length - 1 && !/^\d+$/.test(text)) {
    appendMessage(
      'Ajd√•, telefonnummer f√•r bara inneh√•lla siffror. F√∂rs√∂k igen:',
      true
    );
    inputEl.value = '';
    return;
  }

  // l√§gg till svar och g√• vidare till n√§sta fr√•ga
  appendMessage(text, false);
  answers.push({ question: questions[currentQuestion], answer: text });
  currentQuestion++;

  // forts√§tt med n√§sta fr√•ga eller skicka in analys om klart
  if (currentQuestion < questions.length) {
    appendMessage(questions[currentQuestion], true);
    inputEl.focus();
  } else {
    const summary = answers
      .map((a) => `‚Ä¢ ${a.question}\n‚Üí ${a.answer}`)
      .join('\n\n');

    const name = answers[questions.length - 3].answer;
    const email = answers[questions.length - 2].answer;
    const phone = answers[questions.length - 1].answer;

    try {
      const res = await fetch(CONTACT_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name,
          email,
          phone,
          message: `Behovsanalys fr√•n appyBot:\n\n${summary}`,
        }),
      });
      if (!res.ok) throw new Error(`Status ${res.status}`);
      appendMessage('F√§rdigt ‚Äì Andreas √•terkommer s√• snart han kan! üòâ', true);
      setTimeout(() => {
        closeChatWindow();
      }, 1500);
    } catch (err) {
      console.error('Kontakt-POST failed:', err);
      appendMessage(
        'Oj d√•, kunde inte skicka din analys ‚Äì prova igen senare.',
        true
      );
    }

    // nollst√§ll fl√∂det
    askedForConsent = false;
    inNeedsFlow = false;
    currentQuestion = 0;
    answers = [];
  }

  inputEl.value = '';
}

// skicka meddelande till AI:n
async function handleAIResponse(text) {
  appendMessage(text, false);
  inputEl.value = '';
  appendMessage('‚Ä¶ skickar‚Ä¶', true);

  try {
    const res = await fetch(API_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ message: text }),
    });
    if (!res.ok) throw new Error(`Status ${res.status}`);

    const { reply, triggerNeedsFlow } = await res.json();

    const lastMsg = bodyEl.lastChild;
    if (lastMsg && lastMsg.textContent === '‚Ä¶ skickar‚Ä¶') {
      bodyEl.removeChild(lastMsg);
    }

    appendMessage(reply, true);

    if (triggerNeedsFlow) {
      askedForConsent = true;
      appendMessage(questions[currentQuestion], true);
      inputEl.focus();
    }
  } catch (err) {
    const lastMsg = bodyEl.lastChild;
    if (lastMsg && lastMsg.textContent === '‚Ä¶ skickar‚Ä¶') {
      bodyEl.removeChild(lastMsg);
    }

    appendMessage('Oj d√•, n√•got blev fel üòï', true);
    console.error('Chat-error:', err);
  }
}
